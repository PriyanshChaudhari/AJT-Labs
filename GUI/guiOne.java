package GUI;

import Book.Book;
import IO.FileIO;
import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.Date;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Locale;

public class guiOne extends JFrame {
    private JPanel mainPanel;
    private JPanel topPanel;
    private JLabel title;
    private JPanel detailsPanel;
    private JTextField bookId;
    private JTextField bookName;
    private JTextField authorName;
    private JTextField publication;
    private JTextField dateofPublication;
    private JLabel DateofPublication;
    public JButton submitDetailsButton;
    private JTextField priceofBook;
    private JLabel BookId;
    private JLabel BookName;
    private JLabel AuthorName;
    private JLabel Publication;
    private JLabel PriceofBook;
    public JPanel oPpanel;


    ArrayList<Book> booksList = new ArrayList<>();

    FileIO fio = new FileIO();

    public guiOne() throws IOException {
        setFrame();
        submitDetailsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                writeData();
                resetTextFields();
            }
        });

    }

    private void setFrame() {
        setContentPane(mainPanel);
        setSize(800, 450);
        setVisible(true);
    }

    private void writeData() {

        Date dateofPubl = new Date(Date.parse("01/01/2024"));
        try {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
            dateofPubl = new Date(sdf.parse(dateofPublication.getText()).getTime());
        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(mainPanel, "Please enter date in dd/MM/yyyy format!");
        }

        Book ipObj = new Book(Integer.parseInt(bookId.getText()),
                bookName.getText(),
                authorName.getText(),
                publication.getText(),
                dateofPubl,
                Integer.parseInt(priceofBook.getText()));
        booksList.add(ipObj);

        try {
            fio.writeToFile(ipObj);
        } catch (IOException ex) {
            ex.printStackTrace();
        }

        JOptionPane.showMessageDialog(mainPanel, "Book Details entered successfully!");
    }


    private void resetTextFields() {
        ArrayList<JTextField> fieldList = new ArrayList<>();
        fieldList.add(bookId);
        fieldList.add(bookName);
        fieldList.add(authorName);
        fieldList.add(publication);
        fieldList.add(dateofPublication);
        fieldList.add(priceofBook);
        for (JTextField field : fieldList) {
            field.setText("");
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new FormLayout("fill:d:grow", "center:d:noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        mainPanel.setAutoscrolls(true);
        mainPanel.setForeground(new Color(-13882309));
        mainPanel.setMinimumSize(new Dimension(800, 450));
        mainPanel.setPreferredSize(new Dimension(800, 450));
        topPanel = new JPanel();
        topPanel.setLayout(new FormLayout("fill:d:grow", "center:d:noGrow"));
        CellConstraints cc = new CellConstraints();
        mainPanel.add(topPanel, cc.xy(1, 1));
        title = new JLabel();
        Font titleFont = this.$$$getFont$$$("Segoe UI", Font.PLAIN, 18, title.getFont());
        if (titleFont != null) title.setFont(titleFont);
        title.setHorizontalAlignment(0);
        title.setHorizontalTextPosition(0);
        title.setText("Book Entry");
        topPanel.add(title, cc.xy(1, 1));
        detailsPanel = new JPanel();
        detailsPanel.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow,top:4dlu:noGrow,center:max(d;4px):noGrow"));
        mainPanel.add(detailsPanel, cc.xy(1, 3));
        BookId = new JLabel();
        BookId.setHorizontalAlignment(0);
        BookId.setPreferredSize(new Dimension(100, 18));
        BookId.setText("BookId");
        detailsPanel.add(BookId, cc.xy(1, 3));
        BookName = new JLabel();
        BookName.setHorizontalAlignment(0);
        BookName.setPreferredSize(new Dimension(100, 18));
        BookName.setText("BookName");
        detailsPanel.add(BookName, cc.xy(1, 5));
        bookId = new JTextField();
        bookId.setPreferredSize(new Dimension(150, 30));
        detailsPanel.add(bookId, cc.xy(3, 3, CellConstraints.LEFT, CellConstraints.DEFAULT));
        AuthorName = new JLabel();
        AuthorName.setHorizontalAlignment(0);
        AuthorName.setPreferredSize(new Dimension(100, 18));
        AuthorName.setText("Author Name");
        detailsPanel.add(AuthorName, cc.xy(1, 7));
        bookName = new JTextField();
        bookName.setPreferredSize(new Dimension(400, 30));
        detailsPanel.add(bookName, cc.xyw(3, 5, 3, CellConstraints.LEFT, CellConstraints.DEFAULT));
        Publication = new JLabel();
        Publication.setHorizontalAlignment(0);
        Publication.setPreferredSize(new Dimension(100, 18));
        Publication.setText("Publication");
        detailsPanel.add(Publication, cc.xy(1, 9));
        authorName = new JTextField();
        authorName.setPreferredSize(new Dimension(400, 30));
        detailsPanel.add(authorName, cc.xyw(3, 7, 3, CellConstraints.LEFT, CellConstraints.DEFAULT));
        DateofPublication = new JLabel();
        DateofPublication.setHorizontalAlignment(0);
        DateofPublication.setPreferredSize(new Dimension(150, 18));
        DateofPublication.setText("Date of Publication");
        detailsPanel.add(DateofPublication, cc.xy(1, 11));
        PriceofBook = new JLabel();
        PriceofBook.setHorizontalAlignment(0);
        PriceofBook.setPreferredSize(new Dimension(100, 18));
        PriceofBook.setText("Price of Boo");
        detailsPanel.add(PriceofBook, cc.xy(1, 13));
        publication = new JTextField();
        publication.setPreferredSize(new Dimension(400, 30));
        detailsPanel.add(publication, cc.xy(3, 9, CellConstraints.LEFT, CellConstraints.DEFAULT));
        dateofPublication = new JTextField();
        dateofPublication.setPreferredSize(new Dimension(150, 30));
        detailsPanel.add(dateofPublication, cc.xy(3, 11, CellConstraints.LEFT, CellConstraints.DEFAULT));
        priceofBook = new JTextField();
        priceofBook.setPreferredSize(new Dimension(150, 30));
        detailsPanel.add(priceofBook, cc.xy(3, 13, CellConstraints.LEFT, CellConstraints.DEFAULT));
        submitDetailsButton = new JButton();
        submitDetailsButton.setText("Submit Details");
        mainPanel.add(submitDetailsButton, cc.xy(1, 5, CellConstraints.CENTER, CellConstraints.DEFAULT));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here

    }
}
